#:schema ../pixi/schema/schema.json
[workspace]
authors = ["fecet <xiezej@gmail.com>"]
channels = ["https://repo.prefix.dev/meta-forge", "conda-forge"]
name = "paxi"
platforms = ["linux-64"]
version = "0.1.0"

[system-requirements]
cuda = "12.7"
libc = { family = "glibc", version = "2.34" }

[dependencies]
# rust = "<1.87"
# evcxr = "*"
just = "*"
# jupyterlab = "*"
dagger = "*"
dagger-io = "*"
python = "3.10.*"
dotenvx = "*"
jq = "*"
podman = "*"

[feature.podman.dependencies]
qemu = "*"
virtiofsd = "*"
podman-docker = ">=5.5.1"

[feature.bootstrap.dependencies]

[environments]
podman = { features = ["podman"], solve-group = "default" }
bootstrap = { features = ["podman", "bootstrap"], solve-group = "default" }

[activation.env]
JUPYTER_PATH = "$CONDA_PREFIX/share/jupyter"
_EXPERIMENTAL_DAGGER_CLI_BIN = "$CONDA_PREFIX/bin/dagger"

[tasks]
set-env = { cmd = "touch .env && echo {{value}}; dotenvx set {{ key }} {{ value }} --plain", args = [
  "key",
  "value",
] }
# | "export \(.key)=${\(.key):-\(.value|@sh)}"
cache-activation = { cmd = '''
pixi shell-hook -e {{ env }} --json | jq -r '
  .environment_variables
  | to_entries[]
  | select( .key | startswith("__") | not )
  | "export \(.key)=\(.value|@sh)"
'
''', args = [{ arg = "env", default = "default" }] }

dagger-run = { cmd = "container | from alpine | with-exec -- {{ cmd }} | stdout", interpreter = "dagger", args = [
  "cmd",
] }

ship-env.cmd = '''
pixi shell-hook -e bootstrap --json | jq -r '
  .environment_variables
  | to_entries[]
  | select( .key | startswith("__") | not )
  | "export \(.key)=\(.value|@sh)"
' | pixi run -e podman machine-bash -c "cat > /root/.bashrc"
'''

[feature.bootstrap.tasks.bootstrap-machine]
cmd = """
# pxr cache-activation podman | pxr machine-bash -c "cat > out"
cat /root/.bashrc
cd thirdparty/podman-machine-os
SRCDIR="."
./build.sh
echo "Success Build"
"""
interpreter = "pixi run -e podman machine-bash"
depends-on = ["ship-env"]

[feature.bootstrap.activation.env]
OUTDIR = "$(pwd)/thirdparty/podman-machine-os/outdir"
REPO = "ghcr.io/fecet"

[feature.podman.tasks]
prepare.cmd = """
for ((i=1;i<=60;i++)); do
  # 单独执行，避免短路；并把输出静音
  podman info  >/dev/null 2>&1
  podman_ok=$?
  buildah info >/dev/null 2>&1
  buildah_ok=$?

  if [[ $podman_ok -eq 0 && $buildah_ok -eq 0 ]]; then
    echo "Podman and Buildah are ready."
    exit 0
  fi

  echo "[$i/60] Waiting for Podman and Buildah..."
  sleep 1
done
"""
prepare.interpreter = "bash"

# machine-bash = { cmd = 'podman machine ssh podman-machine-default "cd $PWD && bash"' }
machine-bash = { cmd = [
  "podman",
  "machine",
  "ssh",
  "podman-machine-default",
  "cd $PWD && bash",
] }

init-machine = { cmd = 'podman machine list --format "{{ "{{.Name}}" }}" | grep -q podman-machine-default || podman machine init --username $USER --image {{ image }}', args = [
  { arg = "image", default = "docker://quay.io/podman/machine-os:next" },
] }

start-machine = { cmd = """\
test -e $CONTAINER_SOCK || \
  ( podman machine set --rootful && podman machine start )\
  """, depends-on = ["init-machine"] }

stop-machine = { cmd = "podman machine stop || true" }
stop-engine.cmd = "podman stop $CONTAINER_NAME || true"
restart-machine.depends-on = ["stop-machine", "start-machine"]

start-engine = { cmd = """\
podman ps --format "{{ "{{.Names}}" }}" | grep -qx $CONTAINER_NAME || \
podman run --rm -d \
-v /var/lib/dagger \
--name $CONTAINER_NAME \
${HTTP_PROXY:+--env HTTP_PROXY=$HTTP_PROXY --env HTTPS_PROXY=$HTTP_PROXY} \
--privileged \
registry.dagger.io/engine:latest \
""", depends-on = ["start-machine"], interpreter = "bash" }

set-machine.depends-on = [
  "start-machine",
  { task = "set-env", environment = "podman", args = [
    "CONTAINER_HOST",
    "unix://$CONTAINER_SOCK",
  ] },
]

set-runner.depends-on = [
  "set-machine",
  { task = "set-env", environment = "podman", args = [
    "_EXPERIMENTAL_DAGGER_RUNNER_HOST",
    "docker-container://$CONTAINER_NAME",
  ] },
  { task = "set-env", environment = "podman", args = [
    "PATH",
    "$CONDA_PREFIX/bin:\\$PATH",
  ] },
]
# attach-machine.cmd = { cmd = 'podman machine ssh podman-machine-default -tt "su - -l -s /usr/bin/zsh rok"'  }

# attach-machine = { cmd = 'podman machine ssh', interpreter = "bash" }
# attach-machine = { cmd = "ssh -i /home/rok/.local/share/containers/podman/machine/machine -p 43369 root@localhost" }

[feature.podman.activation.env]
CONTAINER_NAME = "dagger-engine-custom"
CONTAINER_SOCK = "${XDG_RUNTIME_DIR:-/run/user/$(id -u)}/podman/podman-machine-default-api.sock"
# _EXPERIMENTAL_DAGGER_RUNNER_HOST = "docker-container://$CONTAINER_NAME"
# _EXPERIMENTAL_DAGGER_RUNNER_HOST = "docker-image://registry.dagger.io/engine"
__ = """$(
touch $CONDA_PREFIX/etc/containers/nodocker
)"""
